;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'elisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'ensime-connection-list-mode-abbrev-table '())

(define-abbrev-table 'ensime-inf-mode-abbrev-table '())

(define-abbrev-table 'flycheck-error-list-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gdb-breakpoints-mode-abbrev-table '())

(define-abbrev-table 'gdb-disassembly-mode-abbrev-table '())

(define-abbrev-table 'gdb-frames-mode-abbrev-table '())

(define-abbrev-table 'gdb-locals-mode-abbrev-table '())

(define-abbrev-table 'gdb-memory-mode-abbrev-table '())

(define-abbrev-table 'gdb-registers-mode-abbrev-table '())

(define-abbrev-table 'gdb-script-mode-abbrev-table '())

(define-abbrev-table 'gdb-threads-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table '())

(define-abbrev-table 'go-mode-abbrev-table '())

(define-abbrev-table 'godoc-mode-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'gud-mode-abbrev-table '())

(define-abbrev-table 'helm-major-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'html-helper-mode-abbrev-table
  '(
    ("%" "" (lambda nil (interactive) (snippet-insert "<% $. -%>")) 0)
    ("%%" "" (lambda nil (interactive) (snippet-insert "<%= $. %>")) 0)
    ("%for" "" (lambda nil (interactive) (snippet-insert "<% for $${elem} in @$${list} %>
$>$.
<% end %>$>")) 0)
    ("%h" "" (lambda nil (interactive) (snippet-insert "<%=h $${@item} %>")) 0)
    ("%if" "" (lambda nil (interactive) (snippet-insert "<% if $${cond} -%>
$.
<% end -%>")) 0)
    ("%ifel" "" (lambda nil (interactive) (snippet-insert "<% if $${cond} -%>
$.
<% else -%>
<% end -%>")) 0)
    ("%unless" "" (lambda nil (interactive) (snippet-insert "<% unless $${cond} -%>
$.
<% end -%>")) 0)
    ("body" "" (lambda nil (interactive) (snippet-insert "<body id=\"$${id}\" $${onload}>
$>$.
</body>")) 0)
    ("dchttr" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
$>\"http://www.w3.org/TR/html4/loose.dtd\">
")) 0)
    ("dcxml1" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"
$>\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">
")) 0)
    ("dcxmlf" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">
")) 0)
    ("dcxmls" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
")) 0)
    ("dcxmlt" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">
")) 0)
    ("div" "" (lambda nil (interactive) (snippet-insert "<div>
$>$${paste}
</div>")) 0)
    ("dtht" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"
$>\"http://www.w3.org/TR/html4/strict.dtd\">
")) 0)
    ("ff" "" (lambda nil (interactive) (snippet-insert "<%= form_for :$${item}, :action => \"$${update}\" %>
$.
<% end %>")) 0)
    ("form" "" (lambda nil (interactive) (snippet-insert "<form action=\"$${action}\" method=\"$${post}\" accept-charset=\"utf-8\">
$>$.

$><p><input type=\"submit\" value=\"Continue &rarr;\"/></p>
</form>")) 0)
    ("ft" "" (lambda nil (interactive) (snippet-insert "<%= form_tag :action => \"$${update}\" %>
$.
<%= end_form_tag %>")) 0)
    ("h" "" (lambda nil (interactive) (snippet-insert "<h1 id=\"$${alpha}\">$${paste}</h1>")) 0)
    ("head" "" (lambda nil (interactive) (snippet-insert "<head>
$><meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>
$><title>$${title}</title>
$>$.
</head>")) 0)
    ("input" "" (lambda nil (interactive) (snippet-insert "<input type=\"$${button}\" name=\"$${some_name}\" value=\"$${3}\"$${id}>")) 0)
    ("lia" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :action => \"$${index}\" %>")) 0)
    ("liai" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :action => \"$${edit}\", :id => $${item} %>")) 0)
    ("lic" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\" %>")) 0)
    ("lica" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\", :action => \"$${index}\" %>")) 0)
    ("licai" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\", :action => \"$${edit}\", :id => $${item} %>")) 0)
    ("link" "" (lambda nil (interactive) (snippet-insert "<link rel=\"$${stylesheet}\" href=\"$${master}\" type=\"text/css\" media=\"$${screen}\" title=\"$${title}\" charset=\"$${utf}\"/>")) 0)
    ("mailto" "" (lambda nil (interactive) (snippet-insert "<a href=\"mailto:$${example}?subject=$${feedback}\">$${email}</a>")) 0)
    ("meta" "" (lambda nil (interactive) (snippet-insert "<meta name=\"$${name}\" content=\"$${content}\"/>")) 0)
    ("movie" "" (lambda nil (interactive) (snippet-insert "<object width=\"$${2}\" height=\"$${3}\" classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\" codebase=\"http://www.apple.com/qtactivex/qtplugin.cab\">
$><param name=\"src\" value=\"$${1}\"/>
$><param name=\"controller\" value=\"$${4}\"/>
$><param name=\"autoplay\" value=\"$${5}\"/>
$><embed src=\"$${movie}\"
$>$>width=\"$${320}\" height=\"$${240}\"
$>$>controller=\"$${true}\" autoplay=\"$${true}\"
$>$>scale=\"tofit\" cache=\"true\"
$>$>pluginspage=\"http://www.apple.com/quicktime/download/\"
$>/>
</object>")) 0)
    ("script" "" (lambda nil (interactive) (snippet-insert "<script type=\"text/javascript\" charset=\"utf-8\">
$>$.
</script>")) 0)
    ("scriptsrc" "" (lambda nil (interactive) (snippet-insert "<script src=\"$${1}\" type=\"text/javascript\" charset=\"$${utf}\"></script>")) 0)
    ("style" "" (lambda nil (interactive) (snippet-insert "<style type=\"text/css\" media=\"screen\">
$>$.
</style>")) 0)
    ("table" "" (lambda nil (interactive) (snippet-insert "<table border=\"$${0}\" $${cellpadding}>
$><tr><th>$${Header}</th></tr>
$><tr><td>$${Data}</td></tr>
</table>")) 0)
    ("textarea" "" (lambda nil (interactive) (snippet-insert "<textarea name=\"$${Name}\" rows=\"$${8}\" cols=\"$${40}\">$.</textarea>")) 0)
    ("title" "" (lambda nil (interactive) (snippet-insert "<title>$${title}</title>")) 0)
   ))

(define-abbrev-table 'html-mode-abbrev-table
  '(
    ("%" "" (lambda nil (interactive) (snippet-insert "<% $. -%>")) 0)
    ("%%" "" (lambda nil (interactive) (snippet-insert "<%= $. %>")) 0)
    ("%for" "" (lambda nil (interactive) (snippet-insert "<% for $${elem} in @$${list} %>
$>$.
<% end %>$>")) 0)
    ("%h" "" (lambda nil (interactive) (snippet-insert "<%=h $${@item} %>")) 0)
    ("%if" "" (lambda nil (interactive) (snippet-insert "<% if $${cond} -%>
$.
<% end -%>")) 0)
    ("%ifel" "" (lambda nil (interactive) (snippet-insert "<% if $${cond} -%>
$.
<% else -%>
<% end -%>")) 0)
    ("%unless" "" (lambda nil (interactive) (snippet-insert "<% unless $${cond} -%>
$.
<% end -%>")) 0)
    ("body" "" (lambda nil (interactive) (snippet-insert "<body id=\"$${id}\" $${onload}>
$>$.
</body>")) 0)
    ("dchttr" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
$>\"http://www.w3.org/TR/html4/loose.dtd\">
")) 0)
    ("dcxml1" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"
$>\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">
")) 0)
    ("dcxmlf" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">
")) 0)
    ("dcxmls" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
")) 0)
    ("dcxmlt" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">
")) 0)
    ("div" "" (lambda nil (interactive) (snippet-insert "<div>
$>$${paste}
</div>")) 0)
    ("dtht" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"
$>\"http://www.w3.org/TR/html4/strict.dtd\">
")) 0)
    ("ff" "" (lambda nil (interactive) (snippet-insert "<%= form_for :$${item}, :action => \"$${update}\" %>
$.
<% end %>")) 0)
    ("form" "" (lambda nil (interactive) (snippet-insert "<form action=\"$${action}\" method=\"$${post}\" accept-charset=\"utf-8\">
$>$.

$><p><input type=\"submit\" value=\"Continue &rarr;\"/></p>
</form>")) 0)
    ("ft" "" (lambda nil (interactive) (snippet-insert "<%= form_tag :action => \"$${update}\" %>
$.
<%= end_form_tag %>")) 0)
    ("h" "" (lambda nil (interactive) (snippet-insert "<h1 id=\"$${alpha}\">$${paste}</h1>")) 0)
    ("head" "" (lambda nil (interactive) (snippet-insert "<head>
$><meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>
$><title>$${title}</title>
$>$.
</head>")) 0)
    ("input" "" (lambda nil (interactive) (snippet-insert "<input type=\"$${button}\" name=\"$${some_name}\" value=\"$${3}\"$${id}>")) 0)
    ("lia" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :action => \"$${index}\" %>")) 0)
    ("liai" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :action => \"$${edit}\", :id => $${item} %>")) 0)
    ("lic" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\" %>")) 0)
    ("lica" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\", :action => \"$${index}\" %>")) 0)
    ("licai" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\", :action => \"$${edit}\", :id => $${item} %>")) 0)
    ("link" "" (lambda nil (interactive) (snippet-insert "<link rel=\"$${stylesheet}\" href=\"$${master}\" type=\"text/css\" media=\"$${screen}\" title=\"$${title}\" charset=\"$${utf}\"/>")) 0)
    ("mailto" "" (lambda nil (interactive) (snippet-insert "<a href=\"mailto:$${example}?subject=$${feedback}\">$${email}</a>")) 0)
    ("meta" "" (lambda nil (interactive) (snippet-insert "<meta name=\"$${name}\" content=\"$${content}\"/>")) 0)
    ("movie" "" (lambda nil (interactive) (snippet-insert "<object width=\"$${2}\" height=\"$${3}\" classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\" codebase=\"http://www.apple.com/qtactivex/qtplugin.cab\">
$><param name=\"src\" value=\"$${1}\"/>
$><param name=\"controller\" value=\"$${4}\"/>
$><param name=\"autoplay\" value=\"$${5}\"/>
$><embed src=\"$${movie}\"
$>$>width=\"$${320}\" height=\"$${240}\"
$>$>controller=\"$${true}\" autoplay=\"$${true}\"
$>$>scale=\"tofit\" cache=\"true\"
$>$>pluginspage=\"http://www.apple.com/quicktime/download/\"
$>/>
</object>")) 0)
    ("script" "" (lambda nil (interactive) (snippet-insert "<script type=\"text/javascript\" charset=\"utf-8\">
$>$.
</script>")) 0)
    ("scriptsrc" "" (lambda nil (interactive) (snippet-insert "<script src=\"$${1}\" type=\"text/javascript\" charset=\"$${utf}\"></script>")) 0)
    ("style" "" (lambda nil (interactive) (snippet-insert "<style type=\"text/css\" media=\"screen\">
$>$.
</style>")) 0)
    ("table" "" (lambda nil (interactive) (snippet-insert "<table border=\"$${0}\" $${cellpadding}>
$><tr><th>$${Header}</th></tr>
$><tr><td>$${Data}</td></tr>
</table>")) 0)
    ("textarea" "" (lambda nil (interactive) (snippet-insert "<textarea name=\"$${Name}\" rows=\"$${8}\" cols=\"$${40}\">$.</textarea>")) 0)
    ("title" "" (lambda nil (interactive) (snippet-insert "<title>$${title}</title>")) 0)
   ))

(define-abbrev-table 'ibuffer-mode-abbrev-table '())

(define-abbrev-table 'inf-ruby-mode-abbrev-table '())

(define-abbrev-table 'ivy-occur-grep-mode-abbrev-table '())

(define-abbrev-table 'ivy-occur-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'nxml-mode-abbrev-table
  '(
    ("%" "" (lambda nil (interactive) (snippet-insert "<% $. -%>")) 0)
    ("%%" "" (lambda nil (interactive) (snippet-insert "<%= $. %>")) 0)
    ("%for" "" (lambda nil (interactive) (snippet-insert "<% for $${elem} in @$${list} %>
$>$.
<% end %>$>")) 0)
    ("%h" "" (lambda nil (interactive) (snippet-insert "<%=h $${@item} %>")) 0)
    ("%if" "" (lambda nil (interactive) (snippet-insert "<% if $${cond} -%>
$.
<% end -%>")) 0)
    ("%ifel" "" (lambda nil (interactive) (snippet-insert "<% if $${cond} -%>
$.
<% else -%>
<% end -%>")) 0)
    ("%unless" "" (lambda nil (interactive) (snippet-insert "<% unless $${cond} -%>
$.
<% end -%>")) 0)
    ("body" "" (lambda nil (interactive) (snippet-insert "<body id=\"$${id}\" $${onload}>
$>$.
</body>")) 0)
    ("dchttr" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
$>\"http://www.w3.org/TR/html4/loose.dtd\">
")) 0)
    ("dcxml1" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"
$>\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">
")) 0)
    ("dcxmlf" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">
")) 0)
    ("dcxmls" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
")) 0)
    ("dcxmlt" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
$>\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">
")) 0)
    ("div" "" (lambda nil (interactive) (snippet-insert "<div>
$>$${paste}
</div>")) 0)
    ("dtht" "" (lambda nil (interactive) (snippet-insert "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"
$>\"http://www.w3.org/TR/html4/strict.dtd\">
")) 0)
    ("ff" "" (lambda nil (interactive) (snippet-insert "<%= form_for :$${item}, :action => \"$${update}\" %>
$.
<% end %>")) 0)
    ("form" "" (lambda nil (interactive) (snippet-insert "<form action=\"$${action}\" method=\"$${post}\" accept-charset=\"utf-8\">
$>$.

$><p><input type=\"submit\" value=\"Continue &rarr;\"/></p>
</form>")) 0)
    ("ft" "" (lambda nil (interactive) (snippet-insert "<%= form_tag :action => \"$${update}\" %>
$.
<%= end_form_tag %>")) 0)
    ("h" "" (lambda nil (interactive) (snippet-insert "<h1 id=\"$${alpha}\">$${paste}</h1>")) 0)
    ("head" "" (lambda nil (interactive) (snippet-insert "<head>
$><meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>
$><title>$${title}</title>
$>$.
</head>")) 0)
    ("input" "" (lambda nil (interactive) (snippet-insert "<input type=\"$${button}\" name=\"$${some_name}\" value=\"$${3}\"$${id}>")) 0)
    ("lia" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :action => \"$${index}\" %>")) 0)
    ("liai" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :action => \"$${edit}\", :id => $${item} %>")) 0)
    ("lic" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\" %>")) 0)
    ("lica" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\", :action => \"$${index}\" %>")) 0)
    ("licai" "" (lambda nil (interactive) (snippet-insert "<%= link_to \"$${text}\", :controller => \"$${items}\", :action => \"$${edit}\", :id => $${item} %>")) 0)
    ("link" "" (lambda nil (interactive) (snippet-insert "<link rel=\"$${stylesheet}\" href=\"$${master}\" type=\"text/css\" media=\"$${screen}\" title=\"$${title}\" charset=\"$${utf}\"/>")) 0)
    ("mailto" "" (lambda nil (interactive) (snippet-insert "<a href=\"mailto:$${example}?subject=$${feedback}\">$${email}</a>")) 0)
    ("meta" "" (lambda nil (interactive) (snippet-insert "<meta name=\"$${name}\" content=\"$${content}\"/>")) 0)
    ("movie" "" (lambda nil (interactive) (snippet-insert "<object width=\"$${2}\" height=\"$${3}\" classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\" codebase=\"http://www.apple.com/qtactivex/qtplugin.cab\">
$><param name=\"src\" value=\"$${1}\"/>
$><param name=\"controller\" value=\"$${4}\"/>
$><param name=\"autoplay\" value=\"$${5}\"/>
$><embed src=\"$${movie}\"
$>$>width=\"$${320}\" height=\"$${240}\"
$>$>controller=\"$${true}\" autoplay=\"$${true}\"
$>$>scale=\"tofit\" cache=\"true\"
$>$>pluginspage=\"http://www.apple.com/quicktime/download/\"
$>/>
</object>")) 0)
    ("script" "" (lambda nil (interactive) (snippet-insert "<script type=\"text/javascript\" charset=\"utf-8\">
$>$.
</script>")) 0)
    ("scriptsrc" "" (lambda nil (interactive) (snippet-insert "<script src=\"$${1}\" type=\"text/javascript\" charset=\"$${utf}\"></script>")) 0)
    ("style" "" (lambda nil (interactive) (snippet-insert "<style type=\"text/css\" media=\"screen\">
$>$.
</style>")) 0)
    ("table" "" (lambda nil (interactive) (snippet-insert "<table border=\"$${0}\" $${cellpadding}>
$><tr><th>$${Header}</th></tr>
$><tr><td>$${Data}</td></tr>
</table>")) 0)
    ("textarea" "" (lambda nil (interactive) (snippet-insert "<textarea name=\"$${Name}\" rows=\"$${8}\" cols=\"$${40}\">$.</textarea>")) 0)
    ("title" "" (lambda nil (interactive) (snippet-insert "<title>$${title}</title>")) 0)
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'projectile-rails-compilation-mode-abbrev-table '())

(define-abbrev-table 'projectile-rails-generate-mode-abbrev-table '())

(define-abbrev-table 'projectile-rails-server-mode-abbrev-table '())

(define-abbrev-table 'rails-controller-minor-mode-abbrev-table
  '(
    ("af" "" (lambda nil (interactive) (snippet-insert "after_filter :$${filter}")) 0)
    ("arf" "" (lambda nil (interactive) (snippet-insert "around_filter :$${filter}")) 0)
    ("bf" "" (lambda nil (interactive) (snippet-insert "before_filter :$${filter}")) 0)
    ("ra" "" (lambda nil (interactive) (snippet-insert "render :action => '$${index}'")) 0)
    ("ral" "" (lambda nil (interactive) (snippet-insert "render :action => '$${index}', :layout => '{default}'")) 0)
    ("rcea" "" (lambda nil (interactive) (snippet-insert "render_component :action => '$${index}'")) 0)
    ("rcec" "" (lambda nil (interactive) (snippet-insert "render_component :controller => '$${items}'")) 0)
    ("rceca" "" (lambda nil (interactive) (snippet-insert "render_component :controller => '$${items}', :action => '$${index}'")) 0)
    ("rcreate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-create}")) 0)
    ("rdestroy" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-destroy}")) 0)
    ("rea" "" (lambda nil (interactive) (snippet-insert "redirect_to :action => '$${index}'")) 0)
    ("reai" "" (lambda nil (interactive) (snippet-insert "redirect_to :action => '$${show}', :id => $${item}")) 0)
    ("rec" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}'")) 0)
    ("reca" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}', :action => '$${list}'")) 0)
    ("recai" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}', :action => '$${show}', :id => $${item}")) 0)
    ("redit" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-edit}")) 0)
    ("rest" "" (lambda nil (interactive) (snippet-insert "respond_to do |format|
$>format.html$>$.
end$>")) 0)
    ("rf" "" (lambda nil (interactive) (snippet-insert "render :file => '$${filepath}'")) 0)
    ("rfu" "" (lambda nil (interactive) (snippet-insert "render :file => '$${filepath}', :use_full_path => $${false}")) 0)
    ("ri" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}'")) 0)
    ("ril" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}', :locals => { $${name} => '$${value}'$${4} }")) 0)
    ("rindex" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-index}")) 0)
    ("rit" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}', :type => $${rxml}")) 0)
    ("rl" "" (lambda nil (interactive) (snippet-insert "render :layout => '$${layoutname}'")) 0)
    ("rn" "" (lambda nil (interactive) (snippet-insert "render :nothing => $${true}")) 0)
    ("rnew" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-new}")) 0)
    ("rns" "" (lambda nil (interactive) (snippet-insert "render :nothing => $${true}, :status => $${401}")) 0)
    ("rp" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}'")) 0)
    ("rpc" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :collection => $${items}")) 0)
    ("rpl" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :locals => { :$${name} => '$${value}'$${4} }")) 0)
    ("rpo" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :object => $${object}")) 0)
    ("rps" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :status => $${500}")) 0)
    ("rshow" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-show}")) 0)
    ("rt" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}'")) 0)
    ("rtl" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :layout => '$${layoutname}'")) 0)
    ("rtlt" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :layout => $${true}")) 0)
    ("rts" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :status => $${401}")) 0)
    ("ru" "" (lambda nil (interactive) (snippet-insert "render :update do |page|
$>$.
end$>")) 0)
    ("rupdate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-update}")) 0)
   ))

(define-abbrev-table 'rails-functional-test-minor-mode-abbrev-table
  '(
    ("art" "" (lambda nil (interactive) (snippet-insert "assert_redirected_to :action => '$${index}'")) 0)
    ("as" "" (lambda nil (interactive) (snippet-insert "assert $${test}")) 0)
    ("asa" "" (lambda nil (interactive) (snippet-insert "assert assigns(:$${,rails-snippets-feature:model-name})")) 0)
    ("ase" "" (lambda nil (interactive) (snippet-insert "assert_equal $${expected}, $${actual}")) 0)
    ("asid" "" (lambda nil (interactive) (snippet-insert "assert_in_delta $${expected_float}, $${actual_float}, $${20}")) 0)
    ("asio" "" (lambda nil (interactive) (snippet-insert "assert_instance_of $${ExpectedClass}, $${actual_instance}")) 0)
    ("asko" "" (lambda nil (interactive) (snippet-insert "assert_kind_of $${ExpectedKind}, $${actual_instance}")) 0)
    ("asm" "" (lambda nil (interactive) (snippet-insert "assert_match(/$${expected_pattern}/, $${actual_string})")) 0)
    ("asn" "" (lambda nil (interactive) (snippet-insert "assert_nil $${instance}")) 0)
    ("asne" "" (lambda nil (interactive) (snippet-insert "assert_not_equal $${unexpected}, $${actual}")) 0)
    ("asnm" "" (lambda nil (interactive) (snippet-insert "assert_no_match(/$${unexpected_pattern}/, $${actual_string})")) 0)
    ("asnn" "" (lambda nil (interactive) (snippet-insert "assert_not_nil $${instance}")) 0)
    ("asnr" "" (lambda nil (interactive) (snippet-insert "assert_nothing_raised $${Exception}  { $. }")) 0)
    ("asns" "" (lambda nil (interactive) (snippet-insert "assert_not_same $${unexpected}, $${actual}")) 0)
    ("asnt" "" (lambda nil (interactive) (snippet-insert "assert_nothing_thrown { $. }")) 0)
    ("aso" "" (lambda nil (interactive) (snippet-insert "assert_operator $${left}, :$${operator}, $${right}")) 0)
    ("asr" "" (lambda nil (interactive) (snippet-insert "assert_raise $${Exception} { $. }")) 0)
    ("asre" "" (lambda nil (interactive) (snippet-insert "assert_response :$${success}")) 0)
    ("asrt" "" (lambda nil (interactive) (snippet-insert "assert_respond_to $${object}, :$${method}")) 0)
    ("ass" "" (lambda nil (interactive) (snippet-insert "assert_same $${expected}, $${actual}")) 0)
    ("assd" "" (lambda nil (interactive) (snippet-insert "assert_send [$${object}, :$${message}, $${args}]")) 0)
    ("ast" "" (lambda nil (interactive) (snippet-insert "assert_throws :$${expected} { $. }")) 0)
    ("astm" "" (lambda nil (interactive) (snippet-insert "assert_template '$${index}'")) 0)
    ("cont" "" (lambda nil (interactive) (snippet-insert "context \"$${description}\" do
$>setup do
$>$${setup}
end$>

$>should$.
end$>")) 0)
    ("fix" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:fixture}(:$${one})$.")) 0)
    ("laf" "" (lambda nil (interactive) (snippet-insert "load_all_fixtures")) 0)
    ("rcreate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-create}")) 0)
    ("rdestroy" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-destroy}")) 0)
    ("redit" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-edit}")) 0)
    ("rindex" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-index}")) 0)
    ("rnew" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-new}")) 0)
    ("rshow" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-show}")) 0)
    ("rupdate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-update}")) 0)
    ("sat" "" (lambda nil (interactive) (snippet-insert "should_assign_to :$${variable}")) 0)
    ("savf" "" (lambda nil (interactive) (snippet-insert "should_allow_values_for :$${attribute}")) 0)
    ("sbr" "" (lambda nil (interactive) (snippet-insert "should_be_restful do |$${resource}|
 $>$${resource}.$.
end$>")) 0)
    ("sbt" "" (lambda nil (interactive) (snippet-insert "should_belong_to :$${object}")) 0)
    ("selir" "" (lambda nil (interactive) (snippet-insert "should_ensure_length_in_range :$${attribute}, ($${range})")) 0)
    ("sevir" "" (lambda nil (interactive) (snippet-insert "should_ensure_value_in_range :$${attribute}, ($${range})")) 0)
    ("shabtm" "" (lambda nil (interactive) (snippet-insert "should_have_and_belong_to_many :$${objects}")) 0)
    ("shm" "" (lambda nil (interactive) (snippet-insert "should_have_many :$${objects}")) 0)
    ("sho" "" (lambda nil (interactive) (snippet-insert "should_have_one :$${object}")) 0)
    ("should" "" (lambda nil (interactive) (snippet-insert "should \"$${description}\" do
$>$.
end$>")) 0)
    ("shoulde" "" (lambda nil (interactive) (snippet-insert "should_eventually \"$${description}\" do
 $>$.
end$>")) 0)
    ("shouldes" "" (lambda nil (interactive) (snippet-insert "should_eventually \"$${description}\"
$>shouldes$.")) 0)
    ("shoulds" "" (lambda nil (interactive) (snippet-insert "should \"$${description}\" do
$>flunk
end$>

$>shoulds$.")) 0)
    ("snat" "" (lambda nil (interactive) (snippet-insert "should_not_assign_to :$${variable}")) 0)
    ("snavf" "" (lambda nil (interactive) (snippet-insert "should_not_allow_values_for :$${attribute}")) 0)
    ("snstf" "" (lambda nil (interactive) (snippet-insert "should_not_set_the_flash")) 0)
    ("soanvf" "" (lambda nil (interactive) (snippet-insert "should_only_allow_numeric_values_for :$${attribute}")) 0)
    ("sra" "" (lambda nil (interactive) (snippet-insert "should_require_attributes :$${attribute}")) 0)
    ("sraf" "" (lambda nil (interactive) (snippet-insert "should_render_a_form")) 0)
    ("srdt" "" (lambda nil (interactive) (snippet-insert "should_redirect_to $${redirect}")) 0)
    ("srt" "" (lambda nil (interactive) (snippet-insert "should_render_template :$${template}")) 0)
    ("srua" "" (lambda nil (interactive) (snippet-insert "should_require_unique_attributes :$${attribute}")) 0)
    ("srw" "" (lambda nil (interactive) (snippet-insert "should_respond_with :$${response}")) 0)
    ("sstft" "" (lambda nil (interactive) (snippet-insert "should_set_the_flash_to $${value}")) 0)
   ))

(define-abbrev-table 'rails-helper-minor-mode-abbrev-table
  '(
    ("ra" "" (lambda nil (interactive) (snippet-insert "render :action => '$${index}'")) 0)
    ("ral" "" (lambda nil (interactive) (snippet-insert "render :action => '$${index}', :layout => '{default}'")) 0)
    ("rcea" "" (lambda nil (interactive) (snippet-insert "render_component :action => '$${index}'")) 0)
    ("rcec" "" (lambda nil (interactive) (snippet-insert "render_component :controller => '$${items}'")) 0)
    ("rceca" "" (lambda nil (interactive) (snippet-insert "render_component :controller => '$${items}', :action => '$${index}'")) 0)
    ("rcreate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-create}")) 0)
    ("rdestroy" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-destroy}")) 0)
    ("rea" "" (lambda nil (interactive) (snippet-insert "redirect_to :action => '$${index}'")) 0)
    ("reai" "" (lambda nil (interactive) (snippet-insert "redirect_to :action => '$${show}', :id => $${item}")) 0)
    ("rec" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}'")) 0)
    ("reca" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}', :action => '$${list}'")) 0)
    ("recai" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}', :action => '$${show}', :id => $${item}")) 0)
    ("redit" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-edit}")) 0)
    ("rf" "" (lambda nil (interactive) (snippet-insert "render :file => '$${filepath}'")) 0)
    ("rfu" "" (lambda nil (interactive) (snippet-insert "render :file => '$${filepath}', :use_full_path => $${false}")) 0)
    ("ri" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}'")) 0)
    ("ril" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}', :locals => { $${name} => '$${value}'$${4} }")) 0)
    ("rindex" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-index}")) 0)
    ("rit" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}', :type => $${rxml}")) 0)
    ("rl" "" (lambda nil (interactive) (snippet-insert "render :layout => '$${layoutname}'")) 0)
    ("rn" "" (lambda nil (interactive) (snippet-insert "render :nothing => $${true}")) 0)
    ("rnew" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-new}")) 0)
    ("rns" "" (lambda nil (interactive) (snippet-insert "render :nothing => $${true}, :status => $${401}")) 0)
    ("rp" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}'")) 0)
    ("rpc" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :collection => $${items}")) 0)
    ("rpl" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :locals => { :$${name} => '$${value}'$${4} }")) 0)
    ("rpo" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :object => $${object}")) 0)
    ("rps" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :status => $${500}")) 0)
    ("rshow" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-show}")) 0)
    ("rt" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}'")) 0)
    ("rtl" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :layout => '$${layoutname}'")) 0)
    ("rtlt" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :layout => $${true}")) 0)
    ("rts" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :status => $${401}")) 0)
    ("rupdate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-update}")) 0)
   ))

(define-abbrev-table 'rails-migration-minor-mode-abbrev-table
  '(
    ("acl" "" (lambda nil (interactive) (snippet-insert "add_column :$${,rails-snippets-feature:migration-table-name}, :$${column}, :$${string}")) 0)
    ("ai" "" (lambda nil (interactive) (snippet-insert "add_index :$${,rails-snippets-feature:migration-table-name}, $${column}")) 0)
    ("aiu" "" (lambda nil (interactive) (snippet-insert "add_index :$${,rails-snippets-feature:migration-table-name}, $${column}, :unique => true")) 0)
    ("ct" "" (lambda nil (interactive) (snippet-insert "create_table :$${,rails-snippets-feature:migration-table-name} do |t|
$>tcls$.
end$>")) 0)
    ("dt" "" (lambda nil (interactive) (snippet-insert "drop_table :$${,rails-snippets-feature:migration-table-name}$.")) 0)
    ("recl" "" (lambda nil (interactive) (snippet-insert "rename_column :$${column}, :$${new_column}")) 0)
    ("ret" "" (lambda nil (interactive) (snippet-insert "rename_table :$${,rails-snippets-feature:migration-table-name}, :$${new_name}$.")) 0)
    ("rmcl" "" (lambda nil (interactive) (snippet-insert "remove_column :$${,rails-snippets-feature:migration-table-name}, :$${column}")) 0)
    ("tcl" "" (lambda nil (interactive) (snippet-insert "t.column :$${title}, :$${string}$.")) 0)
    ("tcln" "" (lambda nil (interactive) (snippet-insert "t.column :$${title}, :$${string}, :null => false$.")) 0)
    ("tcls" "" (lambda nil (interactive) (snippet-insert "t.column :$${title}, :$${string}
$>tcls$.")) 0)
   ))

(define-abbrev-table 'rails-model-minor-mode-abbrev-table
  '(
    ("bt" "" (lambda nil (interactive) (snippet-insert "belongs_to :$${model}")) 0)
    ("habtm" "" (lambda nil (interactive) (snippet-insert "has_and_belongs_to_many :$${object}")) 0)
    ("hm" "" (lambda nil (interactive) (snippet-insert "has_many :$${objects}")) 0)
    ("hmt" "" (lambda nil (interactive) (snippet-insert "has_many :$${objects}, :through => :$${,rails-snippets-feature:prev-has-many-table-name}")) 0)
    ("ho" "" (lambda nil (interactive) (snippet-insert "has_one :$${object}")) 0)
    ("va" "" (lambda nil (interactive) (snippet-insert "validates_associated :$${attribute}")) 0)
    ("vc" "" (lambda nil (interactive) (snippet-insert "validates_confirmation_of :$${attribute}")) 0)
    ("ve" "" (lambda nil (interactive) (snippet-insert "validates_exclusion_of :$${attribute}")) 0)
    ("vl" "" (lambda nil (interactive) (snippet-insert "validates_length_of :$${attribute}, :within => $${20}")) 0)
    ("vp" "" (lambda nil (interactive) (snippet-insert "validates_presence_of :$${attribute}")) 0)
    ("vpif" "" (lambda nil (interactive) (snippet-insert "validates_presence_of :$${attribute}, :if => proc { |obj| $${condition} }")) 0)
    ("vu" "" (lambda nil (interactive) (snippet-insert "validates_uniqueness_of :$${attribute}")) 0)
   ))

(define-abbrev-table 'rails-script:output-mode-abbrev-table '())

(define-abbrev-table 'rails-test:compilation-mode-abbrev-table '())

(define-abbrev-table 'rails-unit-test-minor-mode-abbrev-table
  '(
    ("art" "" (lambda nil (interactive) (snippet-insert "assert_redirected_to :action => '$${index}'")) 0)
    ("as" "" (lambda nil (interactive) (snippet-insert "assert $${test}")) 0)
    ("asa" "" (lambda nil (interactive) (snippet-insert "assert assigns(:$${,rails-snippets-feature:model-name})")) 0)
    ("ase" "" (lambda nil (interactive) (snippet-insert "assert_equal $${expected}, $${actual}")) 0)
    ("asid" "" (lambda nil (interactive) (snippet-insert "assert_in_delta $${expected_float}, $${actual_float}, $${20}")) 0)
    ("asio" "" (lambda nil (interactive) (snippet-insert "assert_instance_of $${ExpectedClass}, $${actual_instance}")) 0)
    ("asko" "" (lambda nil (interactive) (snippet-insert "assert_kind_of $${ExpectedKind}, $${actual_instance}")) 0)
    ("asm" "" (lambda nil (interactive) (snippet-insert "assert_match(/$${expected_pattern}/, $${actual_string})")) 0)
    ("asn" "" (lambda nil (interactive) (snippet-insert "assert_nil $${instance}")) 0)
    ("asne" "" (lambda nil (interactive) (snippet-insert "assert_not_equal $${unexpected}, $${actual}")) 0)
    ("asnm" "" (lambda nil (interactive) (snippet-insert "assert_no_match(/$${unexpected_pattern}/, $${actual_string})")) 0)
    ("asnn" "" (lambda nil (interactive) (snippet-insert "assert_not_nil $${instance}")) 0)
    ("asnr" "" (lambda nil (interactive) (snippet-insert "assert_nothing_raised $${Exception}  { $. }")) 0)
    ("asns" "" (lambda nil (interactive) (snippet-insert "assert_not_same $${unexpected}, $${actual}")) 0)
    ("asnt" "" (lambda nil (interactive) (snippet-insert "assert_nothing_thrown { $. }")) 0)
    ("aso" "" (lambda nil (interactive) (snippet-insert "assert_operator $${left}, :$${operator}, $${right}")) 0)
    ("asr" "" (lambda nil (interactive) (snippet-insert "assert_raise $${Exception} { $. }")) 0)
    ("asre" "" (lambda nil (interactive) (snippet-insert "assert_response :$${success}")) 0)
    ("asrt" "" (lambda nil (interactive) (snippet-insert "assert_respond_to $${object}, :$${method}")) 0)
    ("ass" "" (lambda nil (interactive) (snippet-insert "assert_same $${expected}, $${actual}")) 0)
    ("assd" "" (lambda nil (interactive) (snippet-insert "assert_send [$${object}, :$${message}, $${args}]")) 0)
    ("ast" "" (lambda nil (interactive) (snippet-insert "assert_throws :$${expected} { $. }")) 0)
    ("astm" "" (lambda nil (interactive) (snippet-insert "assert_template '$${index}'")) 0)
    ("cont" "" (lambda nil (interactive) (snippet-insert "context \"$${description}\" do
$>setup do
$>$${setup}
end$>

$>should$.
end$>")) 0)
    ("fix" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:fixture}(:$${one})$.")) 0)
    ("laf" "" (lambda nil (interactive) (snippet-insert "load_all_fixtures")) 0)
    ("sat" "" (lambda nil (interactive) (snippet-insert "should_assign_to :$${variable}")) 0)
    ("savf" "" (lambda nil (interactive) (snippet-insert "should_allow_values_for :$${attribute}")) 0)
    ("sbr" "" (lambda nil (interactive) (snippet-insert "should_be_restful do |$${resource}|
 $>$${resource}.$.
end$>")) 0)
    ("sbt" "" (lambda nil (interactive) (snippet-insert "should_belong_to :$${object}")) 0)
    ("selir" "" (lambda nil (interactive) (snippet-insert "should_ensure_length_in_range :$${attribute}, ($${range})")) 0)
    ("sevir" "" (lambda nil (interactive) (snippet-insert "should_ensure_value_in_range :$${attribute}, ($${range})")) 0)
    ("shabtm" "" (lambda nil (interactive) (snippet-insert "should_have_and_belong_to_many :$${objects}")) 0)
    ("shm" "" (lambda nil (interactive) (snippet-insert "should_have_many :$${objects}")) 0)
    ("sho" "" (lambda nil (interactive) (snippet-insert "should_have_one :$${object}")) 0)
    ("should" "" (lambda nil (interactive) (snippet-insert "should \"$${description}\" do
$>$.
end$>")) 0)
    ("shoulde" "" (lambda nil (interactive) (snippet-insert "should_eventually \"$${description}\" do
 $>$.
end$>")) 0)
    ("shouldes" "" (lambda nil (interactive) (snippet-insert "should_eventually \"$${description}\"
$>shouldes$.")) 0)
    ("shoulds" "" (lambda nil (interactive) (snippet-insert "should \"$${description}\" do
$>flunk
end$>

$>shoulds$.")) 0)
    ("snat" "" (lambda nil (interactive) (snippet-insert "should_not_assign_to :$${variable}")) 0)
    ("snavf" "" (lambda nil (interactive) (snippet-insert "should_not_allow_values_for :$${attribute}")) 0)
    ("snstf" "" (lambda nil (interactive) (snippet-insert "should_not_set_the_flash")) 0)
    ("soanvf" "" (lambda nil (interactive) (snippet-insert "should_only_allow_numeric_values_for :$${attribute}")) 0)
    ("sra" "" (lambda nil (interactive) (snippet-insert "should_require_attributes :$${attribute}")) 0)
    ("sraf" "" (lambda nil (interactive) (snippet-insert "should_render_a_form")) 0)
    ("srdt" "" (lambda nil (interactive) (snippet-insert "should_redirect_to $${redirect}")) 0)
    ("srt" "" (lambda nil (interactive) (snippet-insert "should_render_template :$${template}")) 0)
    ("srua" "" (lambda nil (interactive) (snippet-insert "should_require_unique_attributes :$${attribute}")) 0)
    ("srw" "" (lambda nil (interactive) (snippet-insert "should_respond_with :$${response}")) 0)
    ("sstft" "" (lambda nil (interactive) (snippet-insert "should_set_the_flash_to $${value}")) 0)
   ))

(define-abbrev-table 'rails-view-minor-mode-abbrev-table
  '(
    ("ra" "" (lambda nil (interactive) (snippet-insert "render :action => '$${index}'")) 0)
    ("ral" "" (lambda nil (interactive) (snippet-insert "render :action => '$${index}', :layout => '{default}'")) 0)
    ("rcea" "" (lambda nil (interactive) (snippet-insert "render_component :action => '$${index}'")) 0)
    ("rcec" "" (lambda nil (interactive) (snippet-insert "render_component :controller => '$${items}'")) 0)
    ("rceca" "" (lambda nil (interactive) (snippet-insert "render_component :controller => '$${items}', :action => '$${index}'")) 0)
    ("rcreate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-create}")) 0)
    ("rdestroy" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-destroy}")) 0)
    ("rea" "" (lambda nil (interactive) (snippet-insert "redirect_to :action => '$${index}'")) 0)
    ("reai" "" (lambda nil (interactive) (snippet-insert "redirect_to :action => '$${show}', :id => $${item}")) 0)
    ("rec" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}'")) 0)
    ("reca" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}', :action => '$${list}'")) 0)
    ("recai" "" (lambda nil (interactive) (snippet-insert "redirect_to :controller => '$${items}', :action => '$${show}', :id => $${item}")) 0)
    ("redit" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-edit}")) 0)
    ("rf" "" (lambda nil (interactive) (snippet-insert "render :file => '$${filepath}'")) 0)
    ("rfu" "" (lambda nil (interactive) (snippet-insert "render :file => '$${filepath}', :use_full_path => $${false}")) 0)
    ("ri" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}'")) 0)
    ("ril" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}', :locals => { $${name} => '$${value}'$${4} }")) 0)
    ("rindex" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-index}")) 0)
    ("rit" "" (lambda nil (interactive) (snippet-insert "render :inline => '$${hello}', :type => $${rxml}")) 0)
    ("rl" "" (lambda nil (interactive) (snippet-insert "render :layout => '$${layoutname}'")) 0)
    ("rn" "" (lambda nil (interactive) (snippet-insert "render :nothing => $${true}")) 0)
    ("rnew" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-new}")) 0)
    ("rns" "" (lambda nil (interactive) (snippet-insert "render :nothing => $${true}, :status => $${401}")) 0)
    ("rp" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}'")) 0)
    ("rpc" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :collection => $${items}")) 0)
    ("rpl" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :locals => { :$${name} => '$${value}'$${4} }")) 0)
    ("rpo" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :object => $${object}")) 0)
    ("rps" "" (lambda nil (interactive) (snippet-insert "render :partial => '$${item}', :status => $${500}")) 0)
    ("rshow" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-show}")) 0)
    ("rt" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}'")) 0)
    ("rtl" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :layout => '$${layoutname}'")) 0)
    ("rtlt" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :layout => $${true}")) 0)
    ("rts" "" (lambda nil (interactive) (snippet-insert "render :text => '$${render}', :status => $${401}")) 0)
    ("rupdate" "" (lambda nil (interactive) (snippet-insert "$${,rails-snippets-feature:rest-update}")) 0)
   ))

(define-abbrev-table 'rake-compilation-mode-abbrev-table '())

(define-abbrev-table 'ruby-mode-abbrev-table '())

(define-abbrev-table 'sbt-mode-abbrev-table '())

(define-abbrev-table 'scala-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'snippet-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'sql-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'url-cookie-mode-abbrev-table '())

(define-abbrev-table 'web-mode-abbrev-table '())

(define-abbrev-table 'xref--xref-buffer-mode-abbrev-table '())

